@using X.PagedList.Mvc.Core;
@using X.PagedList;

@model IPagedList<NetworksManagement.Data.Models.Device>

@{
    ViewData["Title"] = "Index";
}

@Html.Hidden("message", (string)ViewBag.Message)

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header card-header-primary">
                <div class="row">
                    <div class="col-6">
                        <h3 class="card-title ">Devices List</h3>
                    </div>
                    <div class="col-6 pull-right">
                        <div class="text-right">
                            <a asp-action="Create" class="btn btn-info"><i class="material-icons">add</i> &nbsp; New Device</a>
                        </div>
                    </div>
                </div>
                <br />
            </div>
            <br />
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead class=" text-primary">
                            <tr>
                                <th>@Html.DisplayNameFor(m => m.FirstOrDefault().Name)</th>
                                <th>@Html.DisplayNameFor(m => m.FirstOrDefault().Type)</th>
                                <th>@Html.DisplayNameFor(m => m.FirstOrDefault().Version)</th>
                                <th>@Html.DisplayNameFor(m => m.FirstOrDefault().ModelId)</th>
                                <th>@Html.DisplayNameFor(m => m.FirstOrDefault().Group)</th>
                                <th>@Html.DisplayName("Status")</th>
                                <th>@Html.DisplayName("Uptime")</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@Html.DisplayFor(m => item.Name)</td>
                                    <td>@Html.DisplayFor(m => item.Type)</td>
                                    <td>@Html.DisplayFor(m => item.Version)</td>
                                    <td>@Html.DisplayFor(m => item.Model.Name)</td>
                                    <td>@Html.DisplayFor(m => item.Group.Name)</td>
                                    <td>
                                        <input type="hidden" class="deviceHidden" value="@item.Id" />
                                        <label class="statuslbl">Getting Status</label>
                                    </td>
                                    <td>
                                        <input type="hidden" class="deviceHidden" value="@item.Id" />
                                        <label class="uptimelbl">Getting Uptime</label>
                                    </td>
                                    <td class="td-actions text-right">
                                        <a href="@Url.Action("Details", new { id = item.Id } )" rel="tooltip" class="btn btn-info">
                                            <i class="material-icons">details</i>
                                        </a>
                                        <a href="#" data-toggle="modal" data-target="#terminalModal" rel="tooltip" class="btn btn-info"
                                           data-whatever="@item.Id">
                                            <i class="material-icons">computer</i>
                                        </a>
                                        <a href="@Url.Action("Edit", new { id = item.Id } )" rel="tooltip" class="btn btn-success">
                                            <i class="material-icons">edit</i>
                                        </a>
                                        <a href="@Url.Action("Delete", new { id = item.Id } )" rel="tooltip" class="btn btn-danger">
                                            <i class="material-icons">close</i>
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="terminalModal" tabindex="-1" role="dialog" aria-labelledby="terminalModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form asp-controller="Tools" asp-action="RunCommand" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="terminalModalLabel">Terminal</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="deviceId-input" name="deviceId" />
                    <div class="row">
                        <div class="col-6">
                            <input type="text" class="form-control" id="username" name="username" required placeholder="Username" />
                        </div>
                        <div class="col-6">
                            <input type="password" class="form-control" id="password" name="password" placeholder="Password" />
                        </div>
                    </div>
                    <br />
                    <textarea id="message-text" name="commandTxt" rows="10" style="width:100%" required></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" id="CommandBtn" class="btn btn-primary">Run</button>
                </div>
            </form>

        </div>
    </div>
</div>

@Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new
{
    page
}))

@section Scripts
{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        var deviceId = 0;
        $(document).ready(function () {
            setInterval(function () {
                $(".statuslbl").each(function () {
                    let id = $('input[type=hidden]', $(this).closest("td")).val();
                    let statuslabel = $(this);

                    const url = abstractUrl + "/Tools/DeviceStatus/" + id;

                    $.getJSON(url, function (data) {
                        if (data == true) {
                            statuslabel.html('<i class="material-icons">wifi</i>');
                        } else {
                            statuslabel.html('<i class="material-icons">wifi_off</i>');
                        }
                    });
                });
            }, 5000);

            setInterval(function () {
                $(".uptimelbl").each(function () {
                    let id = $('input[type=hidden]', $(this).closest("td")).val();
                    let uptimelabel = $(this);

                    let uptimeurl = abstractUrl + "/Tools/DeviceUptime/" + id;

                    $.getJSON(uptimeurl, function (data) {
                        uptimelabel.html(data);
                    });
                });
            }, 5000);

            $('#terminalModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget) // Button that triggered the modal
                deviceId = button.data('whatever') // Extract info from data-* attributes
                // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
                // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
                var modal = $(this)
                //modal.find('.modal-title').text('New message to ' + recipient)
                modal.find('#deviceId-input').val(deviceId)
            })

            $('#runCommandBtn').click(function () {
                const url = abstractUrl + "/Tools/RunCommand/";
                var commandText = $('#message-text').val();
                var user = $('#username').val();
                var pass = $('#password').val();

                $.post(url, { id: deviceId, command: commandText, username: user, password: pass })
                    .done(function (data) {
                        $('#terminalModal').modal('toggle');
                    });
            });

            if ($('#message').val()) {
                showNotification('top', 'right')
            }

            function showNotification(from, align) {
                $.notify({
                    icon: "add_alert",
                    message: $('#message').val()

                }, {
                        type: 'success',
                        timer: 4000,
                        placement: {
                            from: from,
                            align: align
                        }
                    });
            }
        });
    </script>
}